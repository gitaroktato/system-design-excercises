pipeline {
    agent any
    environment {
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
        BASEDIR = 'cicd'
        ECR_REPO_URL = sh (
            script: "aws --profile dev cloudformation describe-stacks --stack-name ECR --query Stacks[0].Outputs[0].OutputValue --output text",
            returnStdout: true
        )
        ECS_SERVICE_ARN = sh (
            script: "aws --profile dev cloudformation describe-stacks --stack-name ECS --query Stacks[0].Outputs[0].OutputValue --output text",
            returnStdout: true
        )
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '1'))
        disableConcurrentBuilds()
    }
    stages {
        stage('checkout') {
            steps {
                sh 'git config --global http.sslVerify false'
                git branch: env.BRANCH_NAME, url: 'https://github.com/gitaroktato/system-design-excercises'

            }
        }
        stage('prepare') {
            steps {
               script {
                    env.ECR_REPO_URI = env.ECR_REPO_URL.split("/")[0]
                    env.ECR_IMAGE_NAME = env.ECR_REPO_URL.split("/")[1]
                    env.ECS_CLUSTER_NAME = env.ECS_SERVICE_ARN.split("/")[1]
                    env.ECS_SERVICE_NAME = env.ECS_SERVICE_ARN.split("/")[2]
               }
               dir(BASEDIR) {
                    echo 'Configuring gradle'
                    sh "chmod u+x ./gradlew"
                    echo 'Configuring docker-compose'
                    script {
                        def exists = fileExists '$HOME/docker-compose'
                        if (exists) {
                            echo 'Skipping docker-compose installation'
                        } else {
                            sh "curl -L --fail https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o $HOME/docker-compose"
                            sh "chmod u+x $HOME/docker-compose"
                        }
                    }
               }
            }
        }
        stage('test') {
            agent {
                docker {
                    image 'openjdk:21-jdk-slim'
                    args '--network=host -v $HOME:$HOME:rw'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "GRADLE_USER_HOME=$HOME/.gradle ./gradlew clean test"
               }
            }
        }
        stage('verify') {
            agent {
                docker {
                    image 'openjdk:21-jdk-slim'
                    args '--network=host -v $HOME:$HOME:rw'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "GRADLE_USER_HOME=$HOME/.gradle ./gradlew check"
               }
            }
        }
        stage('package') {
            agent {
                docker {
                    image 'openjdk:21-jdk-slim'
                    args '--network=host -v $HOME:$HOME:rw'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "GRADLE_USER_HOME=$HOME/.gradle ./gradlew build"
               }
            }
        }
        stage('dockerize') {
            steps {
               dir(BASEDIR) {
                    sh "./gradlew -Djib.from.image=openjdk:21-jdk-slim jibDockerBuild --image=$ECR_REPO_URI/$ECR_IMAGE_NAME"
               }
            }
        }
        stage('publish') {
            steps {
               dir(BASEDIR) {
                    sh "aws --profile dev ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REPO_URI"
                    sh "docker push $ECR_REPO_URI/$ECR_IMAGE_NAME"
               }
            }
        }
        stage('deploy') {
            failFast true
            input {
                message "Deploy to eu-west-1?"
                ok "Deploy"
            }
            steps {
                echo "Deploying to eu-west-1"
                sh "aws --profile dev ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment"
            }
        }
    }
    post {
        always {
            dir(BASEDIR) {
                junit 'build/test-results/**/*.xml'
            }
        }
        cleanup {
            dir(BASEDIR) {
                sh "$HOME/docker-compose down"
                sh 'git clean -df'
            }
        }
    }
}