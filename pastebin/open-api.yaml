openapi: 3.0.1
info:
  title: OpenAPI definition for Pastebin
  version: v1
servers:
  - url: http://localhost:8081
    description: New paste creation
  - url: http://localhost:8080
    description: Paste resolution
  - url: http://localhost:80
    description: Load-balancer entrypoint
paths:
  /v1/paste:
    post:
      summary: Create a new paste
      parameters:
        - name: ApiKey
          in: header
          description: API key for traffic shaping
          required: true
          allowEmptyValue: false
          schema:
            type: string
      operationId: paste
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Paste'
      responses:
        '201':
          description: Paste successfully created
          headers:
            location:
              schema:
                type: string
                format: URL
                description: "The created Paste's URL"
                example: "/v1/paste/{uuid}"
        '400':
          description: Bad Request
        '500':
          description: Internal Error
        '503':
          description: Service Temporarily Unavailable
  /v1/paste/{uuid}:
    get:
      summary: Retrieve paste by unique ID
      operationId: getPaste
      parameters:
        - name: ApiKey
          in: header
          description: API key for traffic shaping
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: uuid
          in: path
          description: Paste's unique ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Paste retrieved successfully
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Paste'
          links:
            self:
              operationId: getPaste
              parameters:
                # get the `id` field from the request path parameter named `id`
                id: $request.path.uuid
            getUser:
              operationRef: '#/paths/v1/user/{id}/get'
              parameters:
                name: '$response.body#/userId'
              description: >
                The `userId` value returned in the paste can be used as
                the `id` parameter in `GET /v1/user/{id}/get`.
        "404":
          description: Paste not found
  /v1/user:
    post:
      summary: Create a new user
      parameters:
        - name: ApiKey
          in: header
          description: API key for traffic shaping
          required: true
          allowEmptyValue: false
          schema:
            type: string
      operationId: user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created
          headers:
            location:
              schema:
                type: string
                format: URL
                description: "The User's URL"
                example: "/v1/user/{id}"
        '400':
          description: Bad Request
        '500':
          description: Internal Error
        '503':
          description: Service Temporarily Unavailable
  /v1/user/{id}:
    get:
      summary: Retrieve user by synthetic ID
      operationId: getUser
      parameters:
        - name: ApiKey
          in: header
          description: API key for traffic shaping
          required: true
          allowEmptyValue: false
          schema:
            type: string
        - name: id
          in: path
          description: User's synthetic ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/User'
          links:
            self:
              operationId: getUser
              parameters:
                # get the `id` field from the request path parameter named `id`
                id: $request.path.id
        "404":
          description: User not found
        '500':
          description: Internal Error
        '503':
          description: Service Temporarily Unavailable
components:
  schemas:
    Paste:
      type: object
      required: [content, title]
      properties:
        uuid:
          type: string
          description: The unique ID of the paste.
        content:
          type: string
          description: The textual content of the paste.
        title:
          type: string
          description: An optional title for the paste.
        alias:
          type: string
          description: The alias of the paste that becomes part of the URL.
        userId:
          type: string
        expiry:
          type: string
          format: date
    User:
      type: object
      required: [name]
      properties:
        id:
          type: string
          description: User's synthetic ID
        name:
          type: string
        email:
          type: string
        creationDate:
          type: string
          format: date
        lastLogin:
          type: string
          format: date
