/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package users.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import io.micronaut.http.HttpResponse;
import io.micronaut.http.annotation.*;
import io.reactivex.Single;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.MicronautCodegen", date = "2021-08-06T08:24:32.099Z[GMT]")
@Controller
public interface UsersApi {



    @Operation(summary = "Retrieve user by synthetic ID", operationId = "getUser", description = "" )
    @ApiResponse(responseCode = "200", description = "User retrieved successfully")
    @ApiResponse(responseCode = "404", description = "User not found")
    @ApiResponse(responseCode = "500", description = "Internal Error")
    @ApiResponse(responseCode = "503", description = "Service Temporarily Unavailable")
    @Get(value = "/v1/user/{id}", produces = { "application/json" })
    default Single<HttpResponse<User>> getUser(@NotNull @Parameter(description = "API key for traffic shaping") @Valid @Header(value = "ApiKey") String apiKey
,@Parameter(description = "User's synthetic ID") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

    @Operation(summary = "Create a new user", operationId = "user", description = "" )
    @ApiResponse(responseCode = "201", description = "User successfully created")
    @ApiResponse(responseCode = "400", description = "Bad Request")
    @ApiResponse(responseCode = "500", description = "Internal Error")
    @ApiResponse(responseCode = "503", description = "Service Temporarily Unavailable")
    @Post(value = "/v1/user", consumes = {"application/json"})
    default Single<HttpResponse<Void>> createUser(@NotNull @Parameter(description = "API key for traffic shaping") @Valid @Header(value = "ApiKey") String apiKey
, @Parameter(description = "") @Valid @Body User body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}
